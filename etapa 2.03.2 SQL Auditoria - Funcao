/* 3) A tabela venda necessita de algum recurso de segurança e auditoria. Crie um tabela     */
/* venda_auditoria e para cada operação de insert, update ou delete na tabela venda haja a   */
/* inserção de cópia dos registros na tabela vendas_auditoria. Para isso será necessário     */
/* criar uma trigger para a tabela venda;                                                    */

/*função criada visando a possível utilizacao(com poucos ajustes) por triggers de outras tabelas tambem*/

//vá em Tools > Query Tool
//cole todo o texto abaixo e execute(f5), vai aparecer a msg : Query returned successfully in xxxx msec.


CREATE OR REPLACE FUNCTION conveniencia.fn_auditoria (
)
RETURNS trigger AS
$body$
DECLARE 
 v_codigo_usuario  bigint;
 v_valor_novo text;
 v_valor_velho text;
 v_novo_nulo smallint;
 v_velho_nulo smallint;
 v_sql text;
 r record;
BEGIN                
Select USU.CODIGO from conveniencia.usuario USU WHERE USU.nome = CURRENT_USER into v_codigo_usuario;
FOR r IN SELECT column_name 
         from information_schema.columns 
         WHERE table_schema = 'conveniencia'
          and  table_name   = TG_TABLE_NAME
    LOOP
       IF TG_OP = 'DELETE' THEN 
          execute 'insert into conveniencia.venda_auditoria (chave, operacao, usuario_codigo, campo , valor_velho, valor_novo ) '||
                  ' values ('||old.codigo||', ''D'', '||v_codigo_usuario||', '||quote_literal(r.column_name)||', '||old.codigo||' , null );';
       ELSE
          execute 'Select $1.'||r.column_name ||' , '||
                  ' case when $1.'||r.column_name||' is null then 1 else 0 end ' using NEW into v_valor_novo, v_novo_nulo;             
          IF TG_OP = 'INSERT' THEN
             IF v_novo_nulo = 0 THEN
                execute 'insert into conveniencia.venda_auditoria (chave, operacao, usuario_codigo, campo , valor_velho, valor_novo ) '||
                        ' values ('||new.codigo||', ''I'', '||v_codigo_usuario||', '||quote_literal(r.column_name)||', null , '||quote_literal(v_valor_novo)||' );';
             END IF;
          ELSE
             execute 'select $1.'||r.column_name ||' , '||
                     ' case when $1.'||r.column_name||' is null then 1 else 0 end ' using OLD into v_valor_velho, v_velho_nulo;             
             IF ((v_valor_novo <> v_valor_velho) OR 
                 (v_novo_nulo <> v_velho_nulo)) THEN                           
                IF (v_velho_nulo=0) then
                   v_sql := quote_literal(v_valor_velho)||' , ';
                ELSE
                   v_sql := ' null , '; 
                END IF;
                IF (v_novo_nulo=0) then
                   v_sql := v_sql || quote_literal(v_valor_novo);
                ELSE
                   v_sql := v_sql ||' null '; 
                END IF;
                --raise notice ' valor velho %  valor novo  %',v_valor_velho,v_valor_novo;
                --raise notice ' v_velho_nulo %  v_novo_nulo  %',v_velho_nulo,v_novo_nulo;
                --raise notice ' campo % ',r.column_name;
                execute 'insert into conveniencia.venda_auditoria (chave, operacao, usuario_codigo, campo , valor_velho, valor_novo ) '||
                        ' values ('||old.codigo||', ''U'', '||v_codigo_usuario||', '||quote_literal(r.column_name)||', '||v_sql||' );';
             END IF;           
          END IF;
       END IF;
    END LOOP;
RETURN NULL;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;
